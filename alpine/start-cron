#!/usr/bin/env bash

crontab_user=""
crontab_loglevel=""

# setting user for additional cron jobs
POSITIONAL=()
while [[ $# -gt 0 ]]; do
case $1 in
-u=*|--user=*)
    echo "Set user $1"
    crontab_user="-u ${1#*=}"
    shift
    ;;
-u|--user)
    echo "Set user $2"
    crontab_user="-u $2"
    shift 2
    ;;
-l=*|--loglevel)
    echo "Set loglevel $1"
    crontab_loglevel="-l ${1#*=}"
    shift
    ;;
-l|--loglevel)
    echo "Set loglevel $2"
    crontab_loglevel="-l $2"
    shift 2
    ;;
-*)
    echo "Unknown option: ${1%=*}" > /dev/stderr
    exit 1
    ;;
*)
    if [[ -x $1 ]]; then
        echo "$1 determined as executable file, executing..."
        $1
    else
        POSITIONAL+=("$1")
    fi
    shift
    ;;
esac
done
echo "Positional arguments: ${POSITIONAL[@]}"
set -- "${POSITIONAL[@]}"

# adding additional cron jobs passed by arguments
# every job must be a single quoted string and have standard crontab format,
# e.g.: start-cron --user user "0 \* \* \* \* env >> /var/log/cron.log 2>&1"
[[ ! -z $@ ]] && echo "Using jobs from arguments" && \
{ for cron_job in "$@"; do echo -e ${cron_job}; done } \
    | sed --regexp-extended 's/\\(.)/\1/g' \
    | crontab ${crontab_user} -

# start cron
default_crontabs_dir=/etc/crontabs
crond -L /var/log/cron.log ${crontab_loglevel} -c ${CRONTABS_DIR:-$default_crontabs_dir}

# trap SIGINT and SIGTERM signals and gracefully exit
trap "echo \"stopping crond\"; kill \$!; exit" SIGINT SIGTERM

# start "daemon"
while true
do
    cat /var/log/cron.log & wait $!
done
